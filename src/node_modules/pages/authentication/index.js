import React from 'react'
import {Link, Redirect} from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'

const Authentication = (props) => {
  const [currentUserState, setCurrentUserState] = React.useContext(CurrentUserContext)
  const { path } = props.match

  console.log(currentUserState)

  const isLogin = path === '/login' ? true : false
  const pageTitle = isLogin ? 'Sign In' : 'Sign Up' 
  const descriptionLink = isLogin ? 'register' : 'login'
  const descriptionText = isLogin ? 'Need an account' : 'Have an account?'
  const apiUrl = isLogin ? '/users/login' : '/users'
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = React.useState(false)

  const [email, setEmail] = React.useState('')
  const [password, setPassword] = React.useState('')
  const [username, setUsername] = React.useState('')
  const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)
  const [token, setToken] = useLocalStorage('token')

  const handleSubmit = (event) => {
    event.preventDefault()
    const user = isLogin ? {email, password} : {username, email, password}
    doFetch({
      method: 'post',
      data: {user}
    })
  }

  React.useEffect(()=>{

    if (!response) return

    setToken(response.user.token)
    
    setIsSuccessfullSubmit(true)

    setCurrentUserState( state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user
    }))

  }, [response, setToken])

  if(isSuccessfullSubmit) return <Redirect to="/" />
 
  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">
              { pageTitle }
            </h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
              
              <fieldset>
                { !isLogin && (
                  <fieldset className="form-group">
                    <input
                      className="form-control form-control-lg" 
                      placeholder="User name" 
                      value={username}
                      onChange={(e)=> setUsername(e.target.value)}
                    /> 
                  </fieldset>
                  )
                }
                <fieldset className="form-group">
                  <input
                    className="form-control form-control-lg" 
                    placeholder="email" 
                    value={email}
                    onChange={(e)=> setEmail(e.target.value)}
                  /> 
                </fieldset>
              </fieldset>

              <fieldset>
                <fieldset className="form-group">
                  <input
                    type="password" 
                    className="form-control form-control-lg" 
                    placeholder="password" 
                    value={password}
                    onChange={(e)=> setPassword(e.target.value)}
                  /> 
                </fieldset>
              </fieldset>

              <button 
                className="btn btn-lg btn-primary pull-xs-right" 
                type="submit"
                disabled={isLoading}
              >
                {pageTitle}
              </button>
            </form>
          </div>    
        </div>
      </div>
    </div>
  )
}

export default Authentication